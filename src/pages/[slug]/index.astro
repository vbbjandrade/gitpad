---
import Layout from "../../layouts/Layout.astro";
import { GET, PUT } from "../api/github";

const { slug } = Astro.params;

let result = "";
let file = undefined;

if (slug) {
	try {
		file = await GET(slug);
		console.log("zap", file)
		result = atob(file.data.content)
	} catch (error) {
		if (error instanceof Error) {
			console.error("Error!", error.message);
		}
	}

	if (Astro.request.method === "POST") {
		try {
			const data = await Astro.request.formData();
			const content = data.get("content");
		
			if (content !== result) {
				const res = await PUT(slug, {
					content: content ? String(content) : "",
					sha: file?.data.sha
				});

				result = String(content);
			}
		} catch (error) {
			if (error instanceof Error) {
				console.error("Error!", error.message);
			}
		}
	}

}

---
<Layout title={`${slug}.txt`}>
	<div 
		class="relative h-screen w-full max-w-[1076px] mx-auto p-4 flex items-center"
	>
		<div
			class="
				grid grid-rows-[36px_1fr] pb-4
				bg-[#0d1117] relative w-full rounded-2xl overflow-hidden
				before:border-[rgba(186,214,247,0.06)] before:absolute before:rounded-[inherit] before:pointer-events-none before:content-[''] before:inset-0 before:border
				after:absolute after:rounded-[inherit] after:pointer-events-none after:inset-0 after:content-[''] after:shadow-[inset_0_1px_1px_0_rgba(199,211,234,.12),inset_0_24px_48px_0_rgba(199,211,234,.05)]
			"
		>
			<div 
				id="header" 
				class="
				bg-[rgba(186,207,247,.02)]
					border-b border-[rgba(186,207,247,.08)] w-full flex justify-center items-center
					bg-[radial-gradient(8px_circle_at_16px_50%,rgba(186,207,247,.12)_50%,transparent_51%),radial-gradient(8px_circle_at_32px_50%,rgba(186,207,247,.12)_50%,transparent_51%),radial-gradient(8px_circle_at_48px_50%,rgba(186,207,247,.12)_50%,transparent_51%)]
				"
			>
				<span class="text-[#848d97] select-none">{slug}.txt</span>
			</div>
				<form id="form" method="POST">
					<div 
						id="editorRoot" 
						data-message={result}
						class="
							h-[65vh] flex
							[&>.cm-editor]:w-0 [&>.cm-editor]:flex-grow
							[&_.cm-content]:py-0 [&_.cm-gutters]:bg-transparent [&_.cm-gutters]:border-transparent
							[&_.cm-activeLine]:bg-transparent
							[&_.cm-activeLineGutter]:bg-transparent [&_.cm-activeLineGutter]:font-bold
							[&_.cm-cursor]:border-white
							[&_.cm-selectionBackground]:!bg-white/10
						"
					></div>
					<textarea id="textarea" name="content" hidden></textarea>
				</form>
				<button id="submit" class="mx-4 text-white ml-auto mt-4 transition-all focus:ring outline-none h-8 px-3 rounded-md border border-[#f0f6fc1a] text-sm font-medium bg-[#1f6feb]">
					Commit changes...
				</button>
		</div>
	</div>
</Layout>
<script>
	import { basicSetup } from "codemirror"
	import { EditorView, keymap } from "@codemirror/view"
	import { insertTab, indentLess } from "@codemirror/commands"

	const editorRoot = document.getElementById('editorRoot');

	const editor = editorRoot 
		? new EditorView({
			doc: editorRoot.dataset.message,
			extensions: [
				basicSetup,
				keymap.of([
					{ key: 'Tab', preventDefault: true, run: insertTab },
					{ key: 'Shift-Tab', preventDefault: true, run: indentLess }
				]),
			],
			parent: editorRoot
		}) 
		: undefined

	window.addEventListener("keydown", (e) => {
		if (e.ctrlKey && e.key === 's') {
			e.preventDefault();
			document.getElementById('submit')?.click();
		}
	});

	function submitForm () {
		const form = (document.getElementById('form') as HTMLFormElement);
		const textarea = (document.getElementById('textarea') as HTMLTextAreaElement);

		textarea.value = editor?.state.doc.toString() || "";
		form.submit();
	}

	document.getElementById("submit")?.addEventListener("click", submitForm);
</script>